import { createSlice, PayloadAction, createAsyncThunk } from "@reduxjs/toolkit";
import { RootState } from "../store";
import axios from "axios";


// Thunk for refreshing tokens
export const refreshTokenAsync = createAsyncThunk(
    "auth/refreshToken",
    async (tokens: { accessToken: string; refreshToken: string }, { rejectWithValue }) => {
        try {
            const response = await axios.post("/user/refreshToken", {
                accessToken: tokens.accessToken,
                refreshToken: tokens.refreshToken,
            });

            if (response.data.isSucceed) {
                return response.data.data;
            } else {
                return rejectWithValue("Refresh token failed");
            }
        } catch (error) {
            console.log(error)
            return rejectWithValue("Refresh token failed ");
        }
    }
);

// Auth slice
export const authSlice = createSlice({
    name: "auth",
    initialState,
    reducers: {
        updateToken: (
            state,
            action: PayloadAction<{ accessToken: string; refreshToken: string }>
        ) => {
            state.accessToken = action.payload.accessToken;
            state.refreshToken = action.payload.refreshToken;
            state.user = decodeToken(action.payload.accessToken);
        },
        resetToken: (state) => {
            state.accessToken = undefined;
            state.refreshToken = undefined;
            state.user = undefined;
        },
        setLoading: (state) => {
            state.status = "loading";
        },
        resetLoading: (state) => {
            state.status = "idle";
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(refreshTokenAsync.pending, (state) => {
                state.status = "loading";
            })
            .addCase(refreshTokenAsync.fulfilled, (state, action) => {
                state.status = "idle";
                state.accessToken = action.payload.accessToken;
                state.refreshToken = action.payload.refreshToken;
                state.user = decodeToken(action.payload.accessToken);
            })
            .addCase(refreshTokenAsync.rejected, (state) => {
                state.status = "failed";
                state.accessToken = undefined;
                state.refreshToken = undefined;
                state.user = undefined;
            });
    },
});

// Action creators generated by createSlice
export const { updateToken, resetToken, setLoading, resetLoading } =
    authSlice.actions;

// Selector for accessing the auth state in components
export const selectAuth = (state: RootState) => state.auth;

// Helper function for decoding JWT token
const decodeToken = (token: string): iUser => {
    // Here we assume you have a decode function or a library like jwt-decode
    return jwtDecode<iUser>(token);
};

export default authSlice.reducer;
